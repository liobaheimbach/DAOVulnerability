#import libaries
import pandas as pd
import numpy as np
from web3 import Web3, HTTPProvider
import json 
import pickle
from enum import Enum
from multiprocessing import Process
import numpy as np
import pickle

#url of Ethereum node
urlETH = ""
#connect to Ethereum client 
w3 = Web3(HTTPProvider(urlETH))

tokens =pd.read_csv('data/general/govInfoETH.csv',sep='\t')
tokens =tokens[tokens['delegation']=='R']
tokens =tokens[tokens['name']=='Gas']

class Decimals(Enum): 
    ETH = 18

def getDataFromNodeDelegate2(delegates,w3,directory,token,address,blocks): 
    blocks = [int(x) for x in blocks]
    abi = json.load(open('abi/ENS.abi'))
    contract = w3.eth.contract(address=w3.to_checksum_address(address), abi=abi)
    tokenDistribution=[]    
    decimals = contract.functions.decimals().call()
    for delegate in delegates:
        delegate0 = "0x"+ delegate[3:]
        for block in blocks: 
            try: 
                data = contract.functions.getVotes(w3.to_checksum_address(delegate0)).call({}, block)
                tokenDistribution.append({'delegtate':delegate0,'block':block,'votes':data})
            except:
                pass
    tokenDistributionDF = pd.DataFrame.from_records(tokenDistribution)
    tokenDistributionDF['votes'] = tokenDistributionDF['votes'].apply(lambda x: x/(10**decimals))
    tokenDistributionDF=tokenDistributionDF[tokenDistributionDF['votes']>0]
    tokenDistributionDF.to_pickle(directory+token.lower()+'.pkl')

def getDataFromNodeDelegate(delegates,w3,directory,token,address,blocks): 
    blocks = [int(x) for x in blocks]
    abi = json.load(open('abi/COMP.abi'))
    contract = w3.eth.contract(address=w3.to_checksum_address(address), abi=abi)
    tokenDistribution=[]    
    decimals = contract.functions.decimals().call()
    for delegate in delegates:
        delegate0 = "0x"+ delegate[3:]
        for block in blocks: 
            try:
                data = contract.functions.getCurrentVotes(w3.to_checksum_address(delegate0)).call({}, block)
                tokenDistribution.append({'delegtate':delegate0,'block':block,'votes':data})
            except:
                pass
    tokenDistributionDF = pd.DataFrame.from_records(tokenDistribution).reindex()
    tokenDistributionDF['votes'] = tokenDistributionDF['votes'].apply(lambda x: x/(10**decimals))
    tokenDistributionDF=tokenDistributionDF[tokenDistributionDF['votes']>0]
    tokenDistributionDF.to_pickle(directory+token.lower()+'.pkl')

directory ="data/delDistMonthly/" 
processes = []
    
for idx,row in tokens.iterrows():
    blocksMonthly =pd.read_pickle("data/time/blocksMonthly.p")
    blocks = blocksMonthly.number.tolist()[1:]
    if row['abiToken'] == 'COMP':
        delegatestemp= pd.read_csv("data/delegates/"+row['token'].lower()+".csv",delimiter ="\t",names=['delegate'])
        delegates = delegatestemp['delegate'].values.tolist()       
        p = Process(target=getDataFromNodeDelegate, args=(delegates,w3,directory,row['token'],row['address'],blocks), )
        processes.append(p)
        p.start()
    elif row['abiToken']=='ENS':
        delegatestemp= pd.read_csv("data/delegates/"+row['token'].lower()+".csv",delimiter ="\t",names=['delegate'])
        delegates = delegatestemp['delegate'].values.tolist()        
        p = Process(target=getDataFromNodeDelegate2, args=(delegates,w3,directory,row['token'],row['address'],blocks), )
        processes.append(p)
        p.start()

for process in processes:
    process.join()
    processes.remove(process)