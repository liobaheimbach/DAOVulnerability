#import libaries
import pandas as pd
import numpy as np
from web3 import Web3, HTTPProvider
import json 
from enum import Enum
from multiprocessing import Process
import numpy as np
from os.path import exists

#url of Ethereum node
urlETH = ""
#connect to Ethereum client 
w3 = Web3(HTTPProvider(urlETH))

#block number for events
class BlockNumberETH(Enum): 
    Mar31 =19557288

tokens=pd.read_csv("data/general/govInfoETH.csv",sep='\t')[-8:]

def getDataFromNodeHolder(holders,w3,directory,token,address): 
    if token == 'AAVE':
        abi = json.load(open('abi/AAVE.abi'))
        contract = w3.eth.contract(address=w3.to_checksum_address(address), abi=abi)
        tokenDistribution={}       
        decimals = contract.functions.decimals().call()
        for holder in holders:
            holder0 = "0x"+ holder[3:]
            data = contract.functions.getPowersCurrent(w3.to_checksum_address(holder0)).call({}, int(BlockNumberETH.Mar31.value))
            tokenDistribution[holder0] = data[0]
        tokenDistributionDF = pd.DataFrame(tokenDistribution.items(), columns=['holder', 'balance'])
        tokenDistributionDF['balance'] = tokenDistributionDF['balance'].apply(lambda x: x/(10**decimals))
        tokenDistributionDF = tokenDistributionDF[tokenDistributionDF['balance']>0]
        tokenDistributionDF.to_pickle(directory+token.lower()+'.pkl')
    elif token== 'CRV':
        abi = json.load(open('abi/veCRV.abi'))
        contract = w3.eth.contract(address=w3.to_checksum_address(address), abi=abi)
        tokenDistribution={}       
        decimals = contract.functions.decimals().call()
        for holder in holders:
            holder0 = "0x"+ holder[3:]
            data = contract.functions.balanceOf(w3.to_checksum_address(holder0)).call({}, int(BlockNumberETH.Mar31.value))
            tokenDistribution[holder0] = data 
        tokenDistributionDF = pd.DataFrame(tokenDistribution.items(), columns=['holder', 'balance'])
        tokenDistributionDF['balance'] = tokenDistributionDF['balance'].apply(lambda x: x/(10**decimals))
        tokenDistributionDF = tokenDistributionDF[tokenDistributionDF['balance']>0]
        tokenDistributionDF.to_pickle(directory+token.lower()+'.pkl')
    elif token == 'DYDX':
        abi = json.load(open('abi/DYDX.abi'))
        contract = w3.eth.contract(address=w3.to_checksum_address(address), abi=abi)
        tokenDistribution={}       
        decimals = contract.functions.decimals().call()
        for holder in holders:
            holder0 = "0x"+ holder[3:]
            data = contract.functions.getPowerCurrent(w3.to_checksum_address(holder0),0).call({}, int(BlockNumberETH.Mar31.value))
            tokenDistribution[holder0] = data
        tokenDistributionDF = pd.DataFrame(tokenDistribution.items(), columns=['holder', 'balance'])
        tokenDistributionDF['balance'] = tokenDistributionDF['balance'].apply(lambda x: x/(10**decimals))
        tokenDistributionDF = tokenDistributionDF[tokenDistributionDF['balance']>0]
        tokenDistributionDF.to_pickle(directory+token.lower()+'.pkl')
    else: 
        abi = json.load(open('abi/ERC20.abi'))
        contract = w3.eth.contract(address=w3.to_checksum_address(address), abi=abi)
        tokenDistribution={}       
        decimals = contract.functions.decimals().call()
        for holder in holders:
            holder0 = "0x"+ holder[3:]
            data = contract.functions.balanceOf(w3.to_checksum_address(holder0)).call({}, int(BlockNumberETH.Mar31.value))
            tokenDistribution[holder0] = data
        tokenDistributionDF = pd.DataFrame(tokenDistribution.items(), columns=['holder', 'balance'])
        tokenDistributionDF['balance'] = tokenDistributionDF['balance'].apply(lambda x: x/(10**decimals))
        tokenDistributionDF = tokenDistributionDF[tokenDistributionDF['balance']>0]
        tokenDistributionDF.to_pickle(directory+token.lower()+'.pkl')

directory ="data/tokenDist/" 
processes = []
for ix,row in tokens.iterrows():
    holderstemp= pd.read_csv("data/holders/"+row['token'].lower()+".csv",delimiter ="\t",names=['holder'])
    holders = holderstemp['holder'].values.tolist() 
    p = Process(target=getDataFromNodeHolder, args=(holders,w3,directory,row['token'],row['address']), )
    processes.append(p)
    # start process
    p.start()
    # join processes
for process in processes:
    process.join()
    processes.remove(process)