#import libaries
import pandas as pd
import numpy as np
from web3 import Web3, HTTPProvider
import json 
import pickle
from enum import Enum
from multiprocessing import Process
import numpy as np
import pickle

#url of Optimism node
urlOP= ""
#connect to Optimism client 
w3 = Web3(HTTPProvider(urlOP))

class BlockNumberOP(Enum):
    Mar31 =118165411

with open('data/aggregate/votesData.pkl', 'rb') as handle:
    votesData = pickle.load(handle)

class Decimals(Enum): 
    ETH = 18

def getDataFromNodeDelegate(delegates,w3,directory,token,address,blocks): 
    blocks = [int(x) for x in blocks]
    blocks.append(int(BlockNumberOP.Mar31.value))
    abi = json.load(open('abi/ENS.abi'))
    contract = w3.eth.contract(address=w3.to_checksum_address(address), abi=abi)
    tokenDistribution=[]    
    decimals = contract.functions.decimals().call()
    for delegate in delegates:
        delegate0 = "0x"+ delegate[3:]
        for block in blocks: 
            data = contract.functions.getVotes(w3.to_checksum_address(delegate0)).call({}, block)
            tokenDistribution.append({'delegtate':delegate0,'block':block,'votes':data})
    tokenDistributionDF = pd.DataFrame.from_records(tokenDistribution)
    tokenDistributionDF['votes'] = tokenDistributionDF['votes'].apply(lambda x: x/(10**decimals))
    tokenDistributionDF=tokenDistributionDF[tokenDistributionDF['votes']>0]
    tokenDistributionDF.to_pickle(directory+token.lower()+'.pkl')


directory ="data/delDist/" 
processes = []
blocks = list(votesData['OP'].keys())
blocks =[i[0] for i in blocks]
delegatestemp= pd.read_csv("data/delegates/op.csv",delimiter ="\t",names=['delegate'])
delegates = delegatestemp['delegate'].values.tolist()       
getDataFromNodeDelegate(delegates,w3,directory,'OP','0x4200000000000000000000000000000000000042',blocks)
